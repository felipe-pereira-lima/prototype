datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// Company Model
model Company {
  id            Int            @id @default(autoincrement())
  name          String
  users         User[]
  teams         Team[]
  meetings      Meeting[]
  reviews       Review[]
  selfAssessments SelfAssessment[]
  // Additional fields as needed
}

// User Model (linked to a Company)
model User {
  id                Int               @id @default(autoincrement())
  username          String            @unique @db.VarChar(255)
  email             String            @unique
  firstName         String
  lastName          String
  fullName          String
  password          String
  role              UserRole          @default(EMPLOYEE)
  companyId         Int
  company           Company           @relation(fields: [companyId], references: [id])
  reviews           Review[]          @relation("employeeReviews")
  givenReviews      Review[]          @relation("supervisorReviews")
  peerReviews       PeerReview[]      @relation("reviewedBy")
  givenPeerReviews  PeerReview[]      @relation("reviewer")
  teamId            Int?
  team              Team?             @relation(fields: [teamId], references: [id])
  meetings          Meeting[]
  meetingAttendance MeetingAttendee[]
  selfAssessments   SelfAssessment[]
}

// Team Model (linked to a Company)
model Team {
  id          Int    @id @default(autoincrement())
  name        String
  companyId   Int
  company     Company @relation(fields: [companyId], references: [id])
  members     User[]
}

// Competency Model
model Competency {
  id                 Int                @id @default(autoincrement())
  name               String
  description        String
  levels             CompetencyLevel[]
  reviewCompetencies ReviewCompetency[]
  assessments        Assessment[]
}

// CompetencyLevel Model
model CompetencyLevel {
  id           Int           @id @default(autoincrement())
  level        EmployeeLevel
  description  String
  competencyId Int
  competency   Competency    @relation(fields: [competencyId], references: [id])
}

// Review Model (linked to a Company)
model Review {
  id           Int                @id @default(autoincrement())
  companyId    Int
  company      Company            @relation(fields: [companyId], references: [id])
  competencies ReviewCompetency[]
  feedbackText String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  employee     User               @relation("employeeReviews", fields: [employeeId], references: [id])
  employeeId   Int
  supervisor   User               @relation("supervisorReviews", fields: [supervisorId], references: [id])
  supervisorId Int
}

// ReviewCompetency Model
model ReviewCompetency {
  id           Int        @id @default(autoincrement())
  score        Int
  competencyId Int
  competency   Competency @relation(fields: [competencyId], references: [id])
  reviewId     Int
  review       Review     @relation(fields: [reviewId], references: [id])
}

// PeerReview Model
model PeerReview {
id Int @id @default(autoincrement())
appreciatedText String
improvementText String
createdAt DateTime @default(now())
reviewedById Int
reviewerId Int
reviewer User @relation("reviewer", fields: [reviewerId], references: [id])
reviewedBy User @relation("reviewedBy", fields: [reviewedById], references: [id])
}

// Meeting Model (linked to a Company)
model Meeting {
id Int @id @default(autoincrement())
title String
description String?
scheduledAt DateTime
companyId Int
company Company @relation(fields: [companyId], references: [id])
createdBy User @relation(fields: [createdById], references: [id])
createdById Int
attendees MeetingAttendee[]
}

// SelfAssessment Model (linked to a Company)
model SelfAssessment {
id Int @id @default(autoincrement())
companyId Int
company Company @relation(fields: [companyId], references: [id])
assessments Assessment[]
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
user User @relation(fields: [userId], references: [id])
userId Int
}

// Assessment Model
model Assessment {
id Int @id @default(autoincrement())
score Int
competencyId Int
competency Competency @relation(fields: [competencyId], references: [id])
selfAssessment SelfAssessment @relation(fields: [selfAssessmentId], references: [id])
selfAssessmentId Int
}


enum UserRole {
  EMPLOYEE
  SUPERVISOR
  ADMIN
}

enum EmployeeLevel {
  INTERN
  JUNIOR
  SENIOR
  MANAGER
  EXECUTIVE
  CEO
}


// Many-to-many relation for Meeting attendees
model MeetingAttendee {
meeting Meeting @relation(fields: [meetingId], references: [id])
meetingId Int
user User @relation(fields: [userId], references: [id])
userId Int
@@id([meetingId, userId])
}


