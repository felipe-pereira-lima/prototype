datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int                @id @default(autoincrement())
  company           Company            @relation(fields: [companyId], references: [id])
  companyId         Int
  competencies      Competency[]       @relation("userCompetencies")
  email             String             @unique
  employeeLevel     EmployeeLevel      @default(INTERN)
  firstName         String
  fullName          String
  givenReviews      Review[]           @relation("supervisorReviews")
  lastName          String
  meetings          Meeting[]
  password          String
  position          String?
  reviews           Review[]           @relation("employeeReviews")
  roles             UserRoleRelation[]
  team              Team?              @relation(fields: [teamId], references: [id])
  teamId            Int?
  username          String             @unique @db.VarChar(255)
  supervisorId      Int?               @db.Int
  supervisees       User[]             @relation("SupervisorToSupervisee")
  supervisor        User?              @relation(name: "SupervisorToSupervisee", fields: [supervisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([email, username])
}


model Role {
  id    Int                @id @default(autoincrement())
  name  UserRole
  users UserRoleRelation[]
}

model UserRoleRelation {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Company {
  id          Int          @id @default(autoincrement())
  departments Department[]
  meetings    Meeting[]
  name        String
  reviews     Review[]
  teams       Team[]
  users       User[]
}

model Department {
  id           Int          @id @default(autoincrement())
  company      Company      @relation(fields: [companyId], references: [id])
  companyId    Int
  competencies Competency[]
  name         String
  teams        Team[]
}

model Team {
  id           Int          @id @default(autoincrement())
  company      Company      @relation(fields: [companyId], references: [id])
  companyId    Int
  competencies Competency[] @relation("teamCompetencies")
  department   Department   @relation(fields: [departmentId], references: [id])
  departmentId Int
  members      User[]
  name         String
}

model Competency {
  id                 Int                @id @default(autoincrement())
  department         Department         @relation(fields: [departmentId], references: [id])
  departmentId       Int
  description        String @db.Text
  levels             CompetencyLevel[]
  name               String
  reviewCompetencies ReviewCompetency[]
  teams              Team[]             @relation("teamCompetencies")
  users              User[]             @relation("userCompetencies")
}

model CompetencyLevel {
  id                 Int                @id @default(autoincrement())
  competency         Competency         @relation(fields: [competencyId], references: [id])
  competencyId       Int
  description        String @db.Text
  level              EmployeeLevel
  reviewCompetencies ReviewCompetency[]
}

model Review {
  id                       Int                 @id @default(autoincrement())
  company                  Company             @relation(fields: [companyId], references: [id])
  companyId                Int
  competencies             ReviewCompetency[]
  createdAt                DateTime            @default(now())
  developmentOutlook       DevelopmentOutlook?
  employee                 User                @relation("employeeReviews", fields: [employeeId], references: [id])
  employeeId               Int
  isCompleteBySupervisor   Boolean             @default(false)
  isCompleteByEmployee     Boolean             @default(false)
  name                     String?
  reflection               Reflection?
  reviewType               ReviewType
  supervisor               User                @relation("supervisorReviews", fields: [supervisorId], references: [id])
  supervisorId             Int
  updatedAt                DateTime            @updatedAt
  isEmployeeAllowedToStart Boolean             @default(false)
}

model ReviewCompetency {
  id                    Int              @id @default(autoincrement())
  competency            Competency       @relation(fields: [competencyId], references: [id])
  competencyId          Int
  competencyLevel       CompetencyLevel? @relation(fields: [competencyLevelId], references: [id])
  competencyLevelId     Int?
  supervisorFeedbackText String? @db.Text          
  employeeFeedbackText  String? @db.Text        
  review                Review           @relation(fields: [reviewId], references: [id])
  reviewId              Int
  supervisorScore       Int?            
  employeeScore         Int?            
}


model Reflection {
  id                 Int    @id @default(autoincrement())
  employeeReflection String? @db.Text
  managerReflection  String? @db.Text
  reviewId           Int    @unique
  review             Review @relation(fields: [reviewId], references: [id])
}

model DevelopmentOutlook {
  id                  Int    @id @default(autoincrement())
  employeeDevelopment String? @db.Text
  managerDevelopment  String? @db.Text
  reviewId            Int    @unique
  review              Review @relation(fields: [reviewId], references: [id])
}

model Meeting {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  scheduledAt DateTime
  companyId   Int
  company     Company  @relation(fields: [companyId], references: [id])
  createdById Int
  createdBy   User     @relation(fields: [createdById], references: [id])
  attendeeIds String   @default("[]") 
}


enum UserRole {
  EMPLOYEE
  SUPERVISOR
  ADMIN
}

enum ReviewType {
  SELF_ASSESSMENT
  REVIEW
}

enum EmployeeLevel {
  INTERN
  JUNIOR
  SENIOR
  MANAGER
  EXECUTIVE
  CEO
}

