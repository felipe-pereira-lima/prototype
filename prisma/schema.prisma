datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// User Model (linked to a Company)
model User {
  id                Int               @id @default(autoincrement())
  username          String            @unique @db.VarChar(255)
  email             String            @unique
  firstName         String
  lastName          String
  fullName          String
  password          String
  role              UserRole          @default(EMPLOYEE)
  companyId         Int
  company           Company           @relation(fields: [companyId], references: [id])
  reviews           Review[]          @relation("employeeReviews")
  givenReviews      Review[]          @relation("supervisorReviews")
  peerReviews       PeerReview[]      @relation("reviewedBy")
  givenPeerReviews  PeerReview[]      @relation("reviewer")
  teamId            Int?
  team              Team?             @relation(fields: [teamId], references: [id])
  meetings          Meeting[]
  meetingAttendance MeetingAttendee[]
  competencies      Competency[]      @relation("userCompetencies")
}

// Company Model
model Company {
  id          Int          @id @default(autoincrement())
  name        String
  users       User[] 
  teams       Team[] 
  meetings    Meeting[] 
  reviews     Review[] 
  departments Department[] 
}

// Department Model - Represents a department within a company
model Department {
  id           Int          @id @default(autoincrement())
  name         String
  companyId    Int
  company      Company      @relation(fields: [companyId], references: [id])
  teams        Team[] 
  competencies Competency[] 
}

// Team Model - Represents a team within a company
model Team {
  id           Int          @id @default(autoincrement())
  name         String
  departmentId Int 
  department   Department   @relation(fields: [departmentId], references: [id])
  companyId    Int 
  company      Company      @relation(fields: [companyId], references: [id]) // Back-relation to Company
  members      User[] 
  competencies Competency[] @relation("teamCompetencies")
}

// Competency Model - Represents a specific skill or attribute
model Competency {
  id                 Int                @id @default(autoincrement())
  name               String
  description        String
  departmentId       Int 
  department         Department         @relation(fields: [departmentId], references: [id]) // Department associated with the competency
  levels             CompetencyLevel[]
  reviewCompetencies ReviewCompetency[]
  teams              Team[]             @relation("teamCompetencies")
  users              User[]             @relation("userCompetencies")
}

// CompetencyLevel Model
model CompetencyLevel {
  id                 Int                @id @default(autoincrement())
  level              EmployeeLevel
  description        String
  competencyId       Int
  competency         Competency         @relation(fields: [competencyId], references: [id])
  reviewCompetencies ReviewCompetency[]
}

// Review Model (linked to a Company)
model Review {
  id           Int                @id @default(autoincrement())
  name         String?
  companyId    Int
  company      Company            @relation(fields: [companyId], references: [id])
  competencies ReviewCompetency[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  employee     User               @relation("employeeReviews", fields: [employeeId], references: [id])
  employeeId   Int
  supervisor   User               @relation("supervisorReviews", fields: [supervisorId], references: [id])
  supervisorId Int
  reviewType   ReviewType 
  isComplete   Boolean            @default(false) 
  reflection          Reflection?           
  developmentOutlook  DevelopmentOutlook?   
  careerDevelopment   CareerDevelopment?    
}

// ReviewCompetency Model
model ReviewCompetency {
  id                    Int                @id @default(autoincrement())
  score                 Int
  competencyId          Int
  competency            Competency         @relation(fields: [competencyId], references: [id])
  reviewId              Int
  review                Review             @relation(fields: [reviewId], references: [id])
  competencyLevelId     Int?
  competencyLevel       CompetencyLevel?   @relation(fields: [competencyLevelId], references: [id])
  feedbackText          String?  
}


// Reflection Model
model Reflection {
  id                  Int      @id @default(autoincrement())
  employeeReflection  String   
  managerReflection   String   
  reviewId            Int      @unique
  review              Review   @relation(fields: [reviewId], references: [id])
}

// Development Outlook Model
model DevelopmentOutlook {
  id                      Int      @id @default(autoincrement())
  employeeDevelopment     String   
  managerDevelopment      String   
  reviewId                Int      @unique
  review                  Review   @relation(fields: [reviewId], references: [id])
}

// Career Development Model
model CareerDevelopment {
  id                      Int      @id @default(autoincrement())
  employeeCareerGoals     String   
  managerCareerAssessment String   
  reviewId                Int      @unique
  review                  Review   @relation(fields: [reviewId], references: [id])
}

// PeerReview Model
model PeerReview {
  id              Int      @id @default(autoincrement())
  appreciatedText String
  improvementText String
  createdAt       DateTime @default(now())
  reviewedById    Int
  reviewerId      Int
  reviewer        User     @relation("reviewer", fields: [reviewerId], references: [id])
  reviewedBy      User     @relation("reviewedBy", fields: [reviewedById], references: [id])
}

// Meeting Model (linked to a Company)
model Meeting {
  id          Int               @id @default(autoincrement())
  title       String
  description String?
  scheduledAt DateTime
  companyId   Int
  company     Company           @relation(fields: [companyId], references: [id])
  createdBy   User              @relation(fields: [createdById], references: [id])
  createdById Int
  attendees   MeetingAttendee[]
}

enum UserRole {
  EMPLOYEE
  SUPERVISOR
  ADMIN
}

enum ReviewType {
  SELF_ASSESSMENT
  REVIEW
  PEER_REVIEW
}

enum EmployeeLevel {
  INTERN
  JUNIOR
  SENIOR
  MANAGER
  EXECUTIVE
  CEO
}

// Many-to-many relation for Meeting attendees
model MeetingAttendee {
  meeting   Meeting @relation(fields: [meetingId], references: [id])
  meetingId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int

  @@id([meetingId, userId])
}
